import sysfrom PyQt5 import QtCore, QtGui, QtWidgets, uicimport psycopg2import datetime# from xlsxwriter import *# from xlrd import *import pyqtgraphqtcreator_file = "Books.ui"  # Enter file here.Ui_MainWindow, QtBaseClass = uic.loadUiType(qtcreator_file)class MyWindow(QtWidgets.QMainWindow, Ui_MainWindow):    def __init__(self):        QtWidgets.QMainWindow.__init__(self)        Ui_MainWindow.__init__(self)        self.setupUi(self)        self.ui_changes()        self.db_connect()        self.handel_buttons()        self.open_login_tap()        # self.show_all_catgorys()        # self.show_branch()        # self.show_publishers()        # self.show_author()        # self.show_employee()        # self.show_action()        # self.show_all_hisetory()        # self.show_all_books()        # self.show_all_clients()        # self.retreive_day_work()        # self.dashbord_data()        # self.books_filter_report()        # self.all_client_report()    def ui_changes(self):        self.tabWidget.tabBar().setVisible(False)        self.pushButton_42.setVisible(False)        self.pushButton_44.setVisible(False)    def db_connect(self):        self.db = psycopg2.connect(host="127.0.0.1", database="books", user="postgres", password="Mahmoud90##")        self.cur = self.db.cursor()        # self.db = pymysql.connect(host='127.0.0.1', user='root', password='Mahmoud90##', db='books', use_unicode=True,        #                           charset="utf8")        # self.cur = self.db.cursor()        print('Connection Accepted')    def handel_buttons(self):        self.pushButton.clicked.connect(self.open_daily_movements_tap)        self.pushButton_2.clicked.connect(self.open_books_tap)        self.pushButton_4.clicked.connect(self.open_clients_tap)        self.pushButton_3.clicked.connect(self.open_dashboard_tap)        self.pushButton_7.clicked.connect(self.open_history_tap)        self.pushButton_5.clicked.connect(self.open_reports_tap)        self.pushButton_6.clicked.connect(self.open_settings_tap)        self.pushButton_19.clicked.connect(self.add_branch)        self.pushButton_20.clicked.connect(self.add_publisher)        self.pushButton_21.clicked.connect(self.add_author)        self.pushButton_23.clicked.connect(self.add_category)        self.pushButton_29.clicked.connect(self.add_employee)        self.pushButton_15.clicked.connect(self.add_new_client)        self.pushButton_10.clicked.connect(self.add_new_book)        self.pushButton_12.clicked.connect(self.edit_book_search)        self.pushButton_11.clicked.connect(self.edit_book)        self.pushButton_17.clicked.connect(self.edit_client_search)        self.pushButton_14.clicked.connect(self.show_all_client_search)        self.pushButton_16.clicked.connect(self.edit_client)        self.pushButton_13.clicked.connect(self.delete_book)        self.pushButton_18.clicked.connect(self.delete_client)        self.pushButton_8.clicked.connect(self.handel_to_day_work)        self.pushButton_32.clicked.connect(self.check_empolyee)        self.pushButton_30.clicked.connect(self.edit_employee_data)        self.pushButton_43.clicked.connect(self.delete_employee)        self.pushButton_9.clicked.connect(self.search_all_book)        self.pushButton_33.clicked.connect(self.add_employee_permissions)        self.pushButton_37.clicked.connect(self.books_export_report)        self.pushButton_38.clicked.connect(self.export_client_report)        self.pushButton_22.clicked.connect(self.user_login)        self.pushButton_31.clicked.connect(self.dashbord_data)        self.pushButton_42.clicked.connect(self.sign_out)    def handel_rest_password(self):        pass    def handel_to_day_work(self):        book_titele = self.lineEdit_3.text()        client_national_id = self.lineEdit_4.text()        try:            if book_titele =='':                self.statusBar().showMessage('  من فضلك ادخل اسم الكتاب')            elif client_national_id =='':                self.statusBar().showMessage('  من فضلك ادخل اسم العميل')            else:                type = self.comboBox.currentText()                from_data = str(datetime.date.today())                to_data = self.dateEdit_3.date()                to_data = to_data.toPyDate()                data_to = ((to_data))                date = datetime.datetime.now()                branch = 1                employee = 1                self.cur.execute('''                    INSERT INTO daily_movement(book_id ,client_id ,type , date ,branch_id , book_from , book_to , employee_id)                    VALUES (%s , %s , %s , %s , %s , %s ,%s ,%s )                ''',(book_titele ,client_national_id,type,date,branch,from_data,data_to ,employee))                self.db.commit()                print('ok')                self.lineEdit_3.setText('')                self.lineEdit_4.setText('')                self.retreive_day_work()                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = type                self.cur.execute('''                            INSERT INTO record ( employee_name ,action,date,branch_id)                            VALUES (%s , %s , %s , %s)                        ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()        except:            self.statusBar().showMessage('البيانات غير صحيحه')    def retreive_day_work(self):        self.cur.execute('''            SELECT book_id , client_id ,type , book_from,book_to FROM daily_movement        ''')        data = self.cur.fetchall()        self.tableWidget.setRowCount(0)        self.tableWidget.insertRow(0)        for row ,form in enumerate(data):            for col , item in enumerate(form):                if col == 1:                    sql =''' SELECT name FROM clients WHERE national_id =%s '''                    self.cur.execute(sql,([item]))                    cleint_name = self.cur.fetchone()                    self.tableWidget.setItem(row,col,QtWidgets.QTableWidgetItem(str(cleint_name[0])))                else:                    self.tableWidget.setItem(row,col,QtWidgets.QTableWidgetItem(str(item)))                    col += 1            rowp = self.tableWidget.rowCount()            self.tableWidget.insertRow(rowp)            data = self.cur.fetchall()            for row, form in enumerate(data):                for col, item in enumerate(form):                    self.tableWidget_3.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                    col += 1                row_where = self.tableWidget_3.rowCount()                self.tableWidget_3.insertRow(row_where)        #############################################    def show_all_books(self):        self.tableWidget_2.setRowCount(0)        self.tableWidget_2.insertRow(0)        self.cur.execute('''             SELECT code ,title , category_id,publisher_id,author_id ,price FROM book        ''')        data = self.cur.fetchall()        for row , form in enumerate(data):            for col, item in enumerate(form):                self.tableWidget_2.setItem(row, col,QtWidgets.QTableWidgetItem(str(item)))                col += 1            row_where = self.tableWidget_2.rowCount()            self.tableWidget_2.insertRow(row_where)    def add_new_book(self):        book_title = self.lineEdit_6.text()        category = self.comboBox_3.currentText()        description = self.textEdit.toPlainText()        price = self.lineEdit_95.text()        code = self.lineEdit_96.text()        publisher_id = self.comboBox_4.currentText()        author_id = self.comboBox_5.currentText()        status = self.comboBox_6.currentText()        part_order = self.lineEdit_98.text()        barcode = self.lineEdit_100.text()        image = 'mahmoud'        date = datetime.datetime.now()        try:            self.cur.execute('''                INSERT INTO book(title , description , category_id ,code ,                barcode ,part_order,price, publisher_id , author_id ,image , status ,date)                VALUES (%s , %s , %s, %s , %s , %s , %s , %s , %s, %s, %s, %s)             ''', (book_title, description, category, code, barcode, part_order,                   price, publisher_id, author_id, image, status, date))            self.db.commit()            self.show_all_books()            self.lineEdit_6.setText('')            self.comboBox_3.setCurrentIndex(0)            self.comboBox_4.setCurrentIndex(0)            self.comboBox_5.setCurrentIndex(0)            self.lineEdit_95.setText('')            self.lineEdit_96.setText('')            self.lineEdit_98.setText('')            self.lineEdit_100.setText('')            self.textEdit.setPlainText('')            self.statusBar().showMessage('Book Added')            user_name = self.lineEdit_29.text()            self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''',(user_name,))            data = self.cur.fetchone()            date = datetime.datetime.now()            Action = 'Add Book'            self.cur.execute('''                      INSERT INTO record ( employee_name ,action,date,branch_id)                      VALUES (%s , %s , %s , %s)                  ''', (user_name, Action, date, data))            self.db.commit()            self.show_all_hisetory()        except:            self.statusBar().showMessage('ربما يكون الكتاب موجود بالفعل او ان البيانات غير صحيحه')    def edit_book_search(self):        book_code = self.lineEdit_12.text()        try:            if book_code == (''):                self.statusBar().showMessage('من فضلك ادخل الكود الخاص بالكتاب')            else:                sql = ('''                           SELECT * FROM book WHERE code = %s                       ''')                self.cur.execute(sql, [book_code])                data = self.cur.fetchone()                self.lineEdit_14.setText(data[1])                self.comboBox_8.setCurrentText(data[3])                self.comboBox_10.setCurrentText(data[8])                self.comboBox_9.setCurrentText(data[9])                self.comboBox_7.setCurrentText(data[11])                self.lineEdit_49.setText(str(data[7]))                self.lineEdit_50.setText(str(data[6]))                self.lineEdit_51.setText(data[5])                self.textEdit_2.setPlainText(data[2])                self.statusBar().showMessage('بحث')        except:            self.statusBar().showMessage('كود الكتاب غير صحيح')    def edit_book(self):        book_title = self.lineEdit_14.text()        category = self.comboBox_8.currentText()        description = self.textEdit_2.toPlainText()        price = self.lineEdit_49.text()        code = self.lineEdit_12.text()        publisher_id = self.comboBox_10.currentText()        author_id = self.comboBox_9.currentText()        status = self.comboBox_7.currentText()        part_order = self.lineEdit_50.text()        barcode = self.lineEdit_51.text()        try:            self.cur.execute(''' UPDATE book SET title = %s , description =%s ,category_id =%s,barcode =%s ,part_order =%s,             price =%s ,publisher_id =%s ,author_id =%s, status =%s WHERE code = %s            ''', (book_title,description,category,barcode,part_order,price,publisher_id,author_id,status,code ))            self.db.commit()            self.statusBar().showMessage('تم تعديل معلومات الكتاب بنجاح')            self.show_all_books()            self.lineEdit_14.setText('')            self.comboBox_8.setCurrentIndex(0)            self.comboBox_10.setCurrentIndex(0)            self.comboBox_9.setCurrentIndex(0)            self.lineEdit_49.setText('')            self.lineEdit_50.setText('')            self.lineEdit_51.setText('')            self.textEdit_2.setPlainText('')            user_name = self.lineEdit_29.text()            self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))            data = self.cur.fetchone()            date = datetime.datetime.now()            Action = 'Edit Book'            self.cur.execute('''                                 INSERT INTO record ( employee_name ,action,date,branch_id)                                 VALUES (%s , %s , %s , %s)                             ''', (user_name, Action, date, data))            self.db.commit()            self.show_all_hisetory()        except:            self.statusBar().showMessage('بيانات الكتاب غير صحيحه')    def search_all_book(self):        book_name = self.lineEdit_2.text()        if book_name == '':            book_name = self.comboBox_2.currentText()            sql = ''' SELECT code ,title ,category_id ,publisher_id,author_id ,price FROM book WHERE category_id = %s '''            self.tableWidget_2.setRowCount(0)            self.tableWidget_2.insertRow(0)            self.cur.execute(sql, [book_name])            data = self.cur.fetchall()            for row, form in enumerate(data):                for col, item in enumerate(form):                    self.tableWidget_2.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                row_where = self.tableWidget_2.rowCount()                self.tableWidget_2.insertRow(row_where)        else:            book_name = self.lineEdit_2.text()            sql = ''' SELECT code ,title ,category_id ,publisher_id,author_id ,price FROM book WHERE title = %s '''            self.tableWidget_2.setRowCount(0)            self.tableWidget_2.insertRow(0)            self.cur.execute(sql, [book_name])            data = self.cur.fetchall()            for row, form in enumerate(data):                for col, item in enumerate(form):                    self.tableWidget_2.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                row_where = self.tableWidget_2.rowCount()                self.tableWidget_2.insertRow(row_where)    def delete_book(self):        book_code = self.lineEdit_12.text()        delet_msg = QtWidgets.QMessageBox.warning(self,"مسح المعلومات","هل انت متاكد",                                      QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)        if delet_msg == QtWidgets.QMessageBox.Yes :            sql = ('''                   DELETE FROM book WHERE code=%s                   ''')            self.cur.execute(sql, [book_code])            self.db.commit()            self.lineEdit_14.setText('')            self.comboBox_8.setCurrentIndex(0)            self.comboBox_10.setCurrentIndex(0)            self.comboBox_9.setCurrentIndex(0)            self.lineEdit_49.setText('')            self.lineEdit_50.setText('')            self.lineEdit_51.setText('')            self.textEdit_2.setPlainText('')            self.statusBar().showMessage('تم حذف الكتاب بنجاح')            self.show_all_books()            user_name = self.lineEdit_29.text()            self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))            data = self.cur.fetchone()            date = datetime.datetime.now()            Action = 'Delete Book'            self.cur.execute('''                         INSERT INTO record ( employee_name ,action,date,branch_id)                         VALUES (%s , %s , %s , %s)                     ''', (user_name, Action, date, data))            self.db.commit()            self.show_all_hisetory()        ############################################################    def show_all_client_search(self):        client_data = self.lineEdit_11.text()        if client_data == '':            self.statusBar().showMessage('من فضلك ادخل بيانات العميل ')        else:            if self.comboBox_12.currentIndex() == 0:                sql = ''' SELECT name ,mail ,phone,national_id,date FROM clients WHERE name = %s '''                self.tableWidget_3.setRowCount(0)                self.tableWidget_3.insertRow(0)                self.cur.execute(sql, [client_data])                data = self.cur.fetchall()                for row, form in enumerate(data):                    for col, item in enumerate(form):                        self.tableWidget_3.setItem(row, col , QtWidgets.QTableWidgetItem(str(item)))                    row_where = self.tableWidget_3.rowCount()                    self.tableWidget_3.insertRow(row_where)            if self.comboBox_12.currentIndex() == 1:                sql = ''' SELECT name ,mail ,phone,national_id,date FROM clients WHERE mail = %s '''                self.tableWidget_3.setRowCount(0)                self.tableWidget_3.insertRow(0)                self.cur.execute(sql, [client_data])                data = self.cur.fetchall()                for row, form in enumerate(data):                    for col, item in enumerate(form):                        self.tableWidget_3.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                    row_where = self.tableWidget_3.rowCount()                    self.tableWidget_3.insertRow(row_where)            if self.comboBox_12.currentIndex() == 2:                sql = ''' SELECT name ,mail ,phone,national_id,date FROM clients WHERE phone = %s '''                self.tableWidget_3.setRowCount(0)                self.tableWidget_3.insertRow(0)                self.cur.execute(sql, [client_data])                data = self.cur.fetchall()                for row, form in enumerate(data):                    for col, item in enumerate(form):                        self.tableWidget_3.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                    row_where = self.tableWidget_3.rowCount()                    self.tableWidget_3.insertRow(row_where)            if self.comboBox_12.currentIndex() == 3:                sql = ''' SELECT name ,mail ,phone,national_id,date FROM clients WHERE national_id = %s '''                self.tableWidget_3.setRowCount(0)                self.tableWidget_3.insertRow(0)                self.cur.execute(sql, [client_data])                data = self.cur.fetchall()                for row, form in enumerate(data):                    for col, item in enumerate(form):                        self.tableWidget_3.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                    row_where = self.tableWidget_3.rowCount()                    self.tableWidget_3.insertRow(row_where)            self.statusBar().showMessage('Done ')    def show_all_clients(self):        self.tableWidget_3.setRowCount(0)        self.tableWidget_3.insertRow(0)        self.cur.execute('''                     SELECT name ,mail , phone,national_id ,date FROM clients                ''')        data = self.cur.fetchall()        for row, form in enumerate(data):            for col, item in enumerate(form):                self.tableWidget_3.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                col += 1            row_where = self.tableWidget_3.rowCount()            self.tableWidget_3.insertRow(row_where)    def add_new_client(self):        client_name = self.lineEdit_15.text()        client_email = self.lineEdit_18.text()        client_phone = self.lineEdit_19.text()        client_national_id = self.lineEdit_38.text()        date = datetime.datetime.now()        try:            if client_name == '':                self.statusBar().showMessage('من فضلك أدخل أسم العميل')            elif client_email == '':                self.statusBar().showMessage('من فضلك ادخل أميل العميل')            elif client_phone == '':                self.statusBar().showMessage('من فضلك ادخل هاتف العميل')            elif client_national_id == '':                self.statusBar().showMessage('من فضلك ادخل الرقم الكودي')            else:                self.cur.execute('''                     INSERT INTO clients(name , mail , phone ,date , national_id)                     VALUES (%s , %s , %s, %s , %s)                      ''', (client_name, client_email, client_phone, date, client_national_id))                self.db.commit()                self.statusBar().showMessage('تم اضافة العميل بنجاح ')                self.lineEdit_15.setText('')                self.lineEdit_18.setText('')                self.lineEdit_19.setText('')                self.lineEdit_38.setText('')                self.show_all_clients()                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = 'Add Client'                self.cur.execute('''                     INSERT INTO record ( employee_name ,action,date,branch_id)                     VALUES (%s , %s , %s , %s)                 ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()        except:            self.statusBar().showMessage('ربما يكون العميل مضاف من قبل او ان البيانات غير صحيحه ')    def edit_client_search(self):        client_data = self.lineEdit_16.text()        if client_data == '':            self.statusBar().showMessage('من فضلك ادخل بيانات العميل')        else:            try:                if self.comboBox_11.currentIndex() == 0:                    sql = ''' SELECT * FROM clients WHERE national_id = %s '''                    self.cur.execute(sql, [client_data])                    dataa = self.cur.fetchone()                if self.comboBox_11.currentIndex() == 1:                    sql = ''' SELECT * FROM clients WHERE name = %s '''                    self.cur.execute(sql, [client_data])                    dataa = self.cur.fetchone()                if self.comboBox_11.currentIndex() == 2:                    sql = ''' SELECT * FROM clients WHERE phone = %s '''                    self.cur.execute(sql, [client_data])                    dataa = self.cur.fetchone()                if self.comboBox_11.currentIndex() == 3:                    sql = ''' SELECT * FROM clients WHERE mail = %s '''                    self.cur.execute(sql, [client_data])                    dataa = self.cur.fetchone()                self.lineEdit_17.setText(dataa[1])                self.lineEdit_20.setText(dataa[2])                self.lineEdit_21.setText(dataa[3])                self.lineEdit_44.setText(str(dataa[5]))                self.statusBar().showMessage('تم الحصول علي بيانات العميل')            except:                self.statusBar().showMessage('العميل غير موجود')    def edit_client(self):        client_name = self.lineEdit_17.text()        client_mail = self.lineEdit_20.text()        client_phone = self.lineEdit_21.text()        national_id = self.lineEdit_16.text()        try:            if national_id =='' :                self.statusBar().showMessage('من فضلك ادخل كود العميل  ')            else:                sql = "UPDATE clients SET name=%s , mail=%s, phone=%s WHERE national_id =%s  "                valu = (client_name,client_mail,client_phone, national_id)                self.cur.execute(sql,valu)                self.db.commit()                self.lineEdit_17.setText("")                self.lineEdit_20.setText("")                self.lineEdit_21.setText("")                self.lineEdit_44.setText("")                self.lineEdit_16.setText("")                self.statusBar().showMessage('تم تعديل بيانات العميل بنجاح ')                self.show_all_clients()                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = 'Edit Client'                self.cur.execute('''                         INSERT INTO record ( employee_name ,action,date,branch_id)                         VALUES (%s , %s , %s , %s)                     ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()        except:            self.statusBar().showMessage('البيانات غير صحيحه ')    def delete_client(self):        client_data = self.lineEdit_16.text()        try:            delet_msg = QtWidgets.QMessageBox.warning(self, "مسح المعلومات", "هل انت متاكد",                                                      QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)            if delet_msg == QtWidgets.QMessageBox.Yes:                if self.comboBox_11.currentIndex() == 1:                    sql = ''' DELETE FROM clients WHERE name = %s '''                    self.cur.execute(sql, [client_data])                    data = self.cur.fetchone()                if self.comboBox_11.currentIndex() == 3:                    sql = ''' DELETE FROM clients WHERE mail = %s '''                    self.cur.execute(sql, [client_data])                    data = self.cur.fetchone()                if self.comboBox_11.currentIndex() == 2:                    sql = ''' DELETE FROM clients WHERE phone = %s '''                    self.cur.execute(sql, [client_data])                    data = self.cur.fetchone()                if self.comboBox_11.currentIndex() == 0:                    sql = ''' DELETE FROM clients WHERE national_id = %s '''                    self.cur.execute(sql, [client_data])                    data = self.cur.fetchone()                    self.db.commit()                    self.lineEdit_17.setText("")                    self.lineEdit_20.setText("")                    self.lineEdit_21.setText("")                    self.lineEdit_44.setText("")                    self.statusBar().showMessage('تم حذف العميل بنجاح')                    self.show_all_clients()                    user_name = self.lineEdit_29.text()                    self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                    data = self.cur.fetchone()                    date = datetime.datetime.now()                    Action = 'Delete Client'                    self.cur.execute('''                                 INSERT INTO record ( employee_name ,action,date,branch_id)                                 VALUES (%s , %s , %s , %s)                             ''', (user_name, Action, date, data))                    self.db.commit()                    self.show_all_hisetory()        except:            self.statusBar().showMessage('العميل غير موجود')    ############################################################    def show_all_hisetory(self):        self.tableWidget_4.setRowCount(0)        self.tableWidget_4.insertRow(0)        self.cur.execute('''                     SELECT employee_name ,action,branch_id,date FROM record                 ''')        data = self.cur.fetchall()        for row, form in enumerate(data):            for col, item in enumerate(form):                self.tableWidget_4.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                col += 1            row_where = self.tableWidget_4.rowCount()            self.tableWidget_4.insertRow(row_where)        ############################################################        # books report    def all_client_report(self):        self.tableWidget_7.setRowCount(0)        self.tableWidget_7.insertRow(0)        self.cur.execute('''                                    SELECT  name,mail,phone,date FROM clients                                ''')        data = self.cur.fetchall()        for row, form in enumerate(data):            for col, item in enumerate(form):                self.tableWidget_7.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                col += 1            row_where = self.tableWidget_7.rowCount()            self.tableWidget_7.insertRow(row_where)    def books_filter_report(self):        self.tableWidget_5.setRowCount(0)        self.tableWidget_5.insertRow(0)        self.cur.execute('''                            SELECT  title,category_id,code,author_id,status,part_order FROM book                        ''')        data = self.cur.fetchall()        for row, form in enumerate(data):            for col, item in enumerate(form):                self.tableWidget_5.setItem(row, col, QtWidgets.QTableWidgetItem(str(item)))                col += 1            row_where = self.tableWidget_5.rowCount()            self.tableWidget_5.insertRow(row_where)    def books_export_report(self):        self.cur.execute('''                     SELECT code ,title , category_id,author_id ,price FROM book                ''')        data = self.cur.fetchall()        excel_file = Workbook('Books_report.xlsx')        sheell = excel_file.add_worksheet()        sheell.write (0,0,'Book Code')        sheell.write (0,1,'Book name')        sheell.write (0,2,'Book category')        sheell.write (0,3,'Book Author')        sheell.write (0,4,'Book Price')        row_num = 1        for row in data :            column_num = 0            for item in row :                sheell.write(row_num,column_num,str(item))                column_num +=1            row_num +=1        excel_file.close()        self.statusBar().showMessage('Export Books Done')        user_name = self.lineEdit_29.text()        self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))        data = self.cur.fetchone()        date = datetime.datetime.now()        Action = 'Export Books'        self.cur.execute('''                 INSERT INTO record ( employee_name ,action,date,branch_id)                 VALUES (%s , %s , %s , %s)             ''', (user_name, Action, date, data))        self.db.commit()        self.show_all_hisetory()    ############################################################    def export_client_report(self):        self.cur.execute('''                        SELECT name , mail , phone,date ,national_id  FROM clients                   ''')        data = self.cur.fetchall()        excel_file = Workbook('Client_report.xlsx')        sheell = excel_file.add_worksheet()        sheell.write(0, 0, 'Client name')        sheell.write(0, 1, 'Client Mail')        sheell.write(0, 2, 'Client Phone')        sheell.write(0, 3, 'Client Join Date')        sheell.write(0, 4, 'Client ID')        row_num = 1        for row in data:            column_num = 0            for item in row:                sheell.write(row_num, column_num, str(item))                column_num += 1            row_num += 1        excel_file.close()        self.statusBar().showMessage('Export Client Done')        user_name = self.lineEdit_29.text()        self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))        data = self.cur.fetchone()        date = datetime.datetime.now()        Action = 'Export Client'        self.cur.execute('''                 INSERT INTO record ( employee_name ,action,date,branch_id)                 VALUES (%s , %s , %s , %s)             ''', (user_name, Action, date, data))        self.db.commit()        self.show_all_hisetory()    def client_filter_report(self):        pass    def client_export_report(self):        pass############################################################    def monthly_report(self):        pass    def monthly_report_export(self):        pass############################################################    def add_branch(self):        branch_name = self.lineEdit_13.text()        branch_code = self.lineEdit_22.text()        branch_location = self.lineEdit_23.text()        try:            if branch_name =='':                self.statusBar().showMessage('من فضلك ادخل أسم  الفرع')            elif branch_code =='':                self.statusBar().showMessage('من فضلك ادخل كود الفرع')            elif branch_location == '' :                self.statusBar().showMessage('من فضلك ادخل مكان الفرع')            else:                self.cur.execute('''                   INSERT INTO branch(Name , Code ,Location)                   VALUES (%s , %s , %s)                   ''', (branch_name, branch_code, branch_location))                self.db.commit()                self.statusBar().showMessage('تم أضافه الفرع')                self.lineEdit_13.setText('')                self.lineEdit_22.setText('')                self.lineEdit_23.setText('')                self.show_branch()                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = 'Add Branch'                self.cur.execute('''                         INSERT INTO record ( employee_name ,action,date,branch_id)                         VALUES (%s , %s , %s , %s)                     ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()        except:            self.statusBar().showMessage('بيانات الفرع غير صحيحه')    def add_category(self):        category_name = self.lineEdit_31.text()        parent_category = self.comboBox_13.currentIndex()        try:            if  category_name =='':                self.statusBar().showMessage('من فضلك ادخل اسم الكاتوجري')            else:                self.cur.execute('''                       INSERT INTO category (Category_name,parent_Category)                       VALUES ( %s , %s)                ''', (category_name, parent_category))                self.db.commit()                self.statusBar().showMessage('Category Added')                self.show_all_catgorys()                self.lineEdit_31.setText('')                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = 'Add Category'                self.cur.execute('''                     INSERT INTO record ( employee_name ,action,date,branch_id)                     VALUES (%s , %s , %s , %s)                 ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()        except:            self.statusBar().showMessage('البيانات غير صحيحه')    def add_publisher(self):        publisher_name = self.lineEdit_25.text()        publisher_location = self.lineEdit_24.text()        try:            if publisher_name =='':                self.statusBar().showMessage('من فضلك ادخل اسم دار النشر')            elif publisher_location =='':                self.statusBar().showMessage('من فضلك ادخل العنوان')            else:                self.cur.execute('''                    INSERT INTO publisher(Name , location )                    VALUES (%s , %s)                    ''', (publisher_name, publisher_location))                self.db.commit()                print('Publisher Added')                self.statusBar().showMessage('Publisher Added')                self.show_publishers()                self.lineEdit_25.setText('')                self.lineEdit_24.setText('')                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = 'Add Publisher'                self.cur.execute('''                         INSERT INTO record ( employee_name ,action,date,branch_id)                         VALUES (%s , %s , %s , %s)                     ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()        except:            self.statusBar().showMessage('بيانات دار النشر غير صحيحة')    def add_author(self):        author_name = self.lineEdit_26.text()        author_mali = self.lineEdit_27.text()        try:            if author_name == '':                self.statusBar().showMessage('من فضلك ادخل اسم الكاتب')            elif author_mali == '':                self.statusBar().showMessage('من فضلك ادخل العنوان')            else:                self.cur.execute('''                            INSERT INTO author(Name , location )                            VALUES (%s , %s)                            ''', (author_name, author_mali))                self.db.commit()                self.statusBar().showMessage('Author Added')                self.show_author()                self.lineEdit_26.setText('')                self.lineEdit_27.setText('')                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = 'Add Author'                self.cur.execute('''                         INSERT INTO record ( employee_name ,action,date,branch_id)                         VALUES (%s , %s , %s , %s)                     ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()        except:            self.statusBar().showMessage(' بيانات الكاتب غير صحيحه')    ########################################################################################    def show_all_catgorys(self):        self.comboBox_13.clear()        self.cur.execute('''                    SELECT Category_name FROM category                    ''')        categries=self.cur.fetchall()        for categries in categries:            self.comboBox_13.addItem(str(categries[0]))            self.comboBox_2.addItem(str(categries[0]))            self.comboBox_3.addItem(str(categries[0]))            self.comboBox_8.addItem(str(categries[0]))    def show_branch(self):        self.comboBox_27.clear()        self.cur.execute('''        select  name from  branch        ''')        branch = self.cur.fetchall()        for branch in branch:            self.comboBox_21.addItem(branch[0])            self.comboBox_22.addItem(branch[0])            self.comboBox_15.addItem(branch[0])            self.comboBox_27.addItem(branch[0])    def show_publishers(self):        self.comboBox_26.clear()        self.cur.execute('''                select name from publisher                ''')        publisher = self.cur.fetchall()        for publisher in publisher:            self.comboBox_10.addItem(publisher[0])            self.comboBox_4.addItem(publisher[0])            self.comboBox_26.addItem(publisher[0])    def show_author(self):        self.comboBox_5.clear()        self.comboBox_9.clear()        self.comboBox_25.clear()        self.cur.execute('''                select name from author                ''')        author = self.cur.fetchall()        for author in author:            self.comboBox_5.addItem(author[0])            self.comboBox_9.addItem(author[0])            self.comboBox_25.addItem(author[0])    def show_action(self):        self.comboBox_14.clear()        self.cur.execute('''                Select  DISTINCT action from record                ''')        action = self.cur.fetchall()        for action in action:            self.comboBox_14.addItems(action)    def show_employee(self):        self.comboBox_19.clear()        self.comboBox_16.clear()        self.cur.execute('''        Select name from employee        ''')        employee = self.cur.fetchall()        for employee in employee:            self.comboBox_19.addItems(employee)            self.comboBox_16.addItems(employee)      ########################################################################################    def add_employee(self):        employee_name = self.lineEdit_28.text()        employee_mali = self.lineEdit_35.text()        employee_phone = self.lineEdit_36.text()        branch = self.comboBox_21.currentText()        national_id = self.lineEdit_37.text()        periority = self.comboBox_23.currentText()        password = self.lineEdit_39.text()        password_again = self.lineEdit_40.text()        date =datetime.datetime.now()        try:            if password == password_again:                self.cur.execute('''                   INSERT INTO employee(name , email , Phone  ,branch, national_id ,date , Periority , password  )                   VALUES (%s , %s , %s , %s , %s , %s , %s , %s )                   ''', (employee_name, employee_mali, employee_phone,branch,national_id,date,periority,password))                self.db.commit()                self.lineEdit_28.setText('')                self.lineEdit_35.setText('')                self.lineEdit_36.setText('')                self.lineEdit_37.setText('')                self.lineEdit_39.setText('')                self.lineEdit_40.setText('')                self.statusBar().showMessage('Employee Added')                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = 'Add Employee'                self.cur.execute('''                         INSERT INTO record ( employee_name ,action,date,branch_id)                         VALUES (%s , %s , %s , %s)                     ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()            else:                self.statusBar().showMessage('Wrong password')        except:            self.statusBar().showMessage('البيانات غير صحيحه')    def check_empolyee(self):        employee_mail = self.lineEdit_41.text()        employee_password = self.lineEdit_42.text()        self.cur.execute (''' SELECT * FROM employee ''')        data = self.cur.fetchall()        for row in data :            if row[2] == employee_mail and row[7] == employee_password:                self.lineEdit_43.setText(row[2])                self.comboBox_22.setCurrentText(row[8])                self.lineEdit_45.setText(row[3])                self.lineEdit_46.setText(str(row[5]))                self.comboBox_24.setCurrentText(row[6])                self.lineEdit_48.setText(row[7])                self.statusBar().showMessage('الباسورد صحيح')            else:                self.statusBar().showMessage('الباسورد غير صحيح')    def edit_employee_data(self):        employee_mail = self.lineEdit_41.text()        employee_name = self.lineEdit_43.text()        employee_phone = self.lineEdit_45.text()        employee_n_id = self.lineEdit_46.text()        periority = self.comboBox_24.currentText()        employee_password2 = self.lineEdit_48.text()        employee_branch = self.comboBox_22.currentText()        employee_password = self.lineEdit_42.text()        try:            if employee_mail =='':                self.statusBar().showMessage('من فضلك ادخل أسم الموظف')            elif employee_password =='':                self.statusBar().showMessage('من فضلك ادخل الباصورد')            elif employee_password == employee_password2:                self.cur.execute('''                 UPDATE employee SET name=%s,Phone=%s,national_id=%s,Periority=%s,password=%s,branch=%s WHERE email =%s                 ''',( employee_name,employee_phone,employee_n_id,periority,employee_password2,employee_branch,employee_mail))                self.db.commit()                self.lineEdit_41.setText('')                self.lineEdit_42.setText('')                self.lineEdit_43.setText('')                self.lineEdit_45.setText('')                self.lineEdit_46.setText('')                self.lineEdit_48.setText('')                self.comboBox_24.setCurrentIndex(0)                self.comboBox_22.setCurrentIndex(0)                self.show_all_clients()                self.statusBar().showMessage('تم تعديل معلومات الموظف  بنجاح')                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = 'Edit Employee'                self.cur.execute('''                         INSERT INTO record ( employee_name ,action,date,branch_id)                         VALUES (%s , %s , %s , %s)                     ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()        except:            self.statusBar().showMessage('البيانات غير صحيحه')    def delete_employee(self):        User_Name = self.lineEdit_41.text()        password=self.lineEdit_42.text()        passqoerd2=self.lineEdit_48.text()        if password =='':            self.statusBar().showMessage("من فضلك ادخل الباسورد")        elif password == passqoerd2:            delet_msg = QtWidgets.QMessageBox.warning(self, "مسح المعلومات", "هل انت متاكد من حذف الموظف",                                                      QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)            if delet_msg == QtWidgets.QMessageBox.Yes:                sql = '''DELETE FROM employee WHERE name=%s '''                self.cur.execute(sql, [User_Name])                self.db.commit()                self.lineEdit_41.setText('')                self.lineEdit_42.setText('')                self.lineEdit_43.setText('')                self.lineEdit_45.setText('')                self.lineEdit_46.setText('')                self.lineEdit_48.setText('')                self.comboBox_24.setCurrentIndex(0)                self.comboBox_22.setCurrentIndex(0)                self.statusBar().showMessage("تم حذف الموظف بنجاح")                self.show_employee()                user_name = self.lineEdit_29.text()                self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))                data = self.cur.fetchone()                date = datetime.datetime.now()                Action = 'Delete Employee'                self.cur.execute('''                     INSERT INTO record ( employee_name ,action,date,branch_id)                     VALUES (%s , %s , %s , %s)                 ''', (user_name, Action, date, data))                self.db.commit()                self.show_all_hisetory()            else:                self.statusBar().showMessage("يجب اضافه الاسم والباسورد والتاكد من العميل")    #############################################    def add_employee_permissions(self):        if self.checkBox_34.isChecked():            employee_name = self.comboBox_19.currentText()            books_tab = 1            client_tab = 1            dashbord_tab = 1            history_tab = 1            reports_tab = 1            settings_tab = 1            add_book = 1            delete_book = 1            edit_book = 1            import_book = 1            export_book = 1            delete_client = 1            add_client = 1            edit_client = 1            import_client = 1            export_client = 1            add_branch = 1            add_publisher = 1            add_category = 1            add_employee = 1            edit_emplooy = 1            delete_emplooy = 1            self.cur.execute('''                        INSERT INTO employee_permission (employee_name,books_tab,client_tab,dashbord_tab,history_tab,                        reports_tab,settings_tab,add_book,delete_book,edit_book,import_book,export_book,delete_client,add_client,                        edit_client,import_client,export_client,add_branch,add_publisher,add_category,add_employee,edit_emplooy,delete_employee)                        VALUES ( %s , %s , %s , %s , %s , %s ,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)                     ''', (            employee_name, books_tab, client_tab, dashbord_tab, history_tab, reports_tab, settings_tab, add_book,            delete_book, edit_book, import_book, export_book, delete_client, add_client, edit_client, import_client,            export_client, add_branch, add_publisher, add_category, add_employee, edit_emplooy,delete_emplooy))            self.db.commit()            self.statusBar().showMessage('تم اضافة الأدمن بنجاح')            user_name = self.lineEdit_29.text()            self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))            data = self.cur.fetchone()            date = datetime.datetime.now()            Action = 'Added Admin'            self.cur.execute('''                     INSERT INTO record ( employee_name ,action,date,branch_id)                     VALUES (%s , %s , %s , %s)                 ''', (user_name, Action, date, data))            self.db.commit()            self.show_all_hisetory()        else:            employee_name = self.comboBox_19.currentText()            books_tab = 0            client_tab = 0            dashbord_tab = 0            history_tab = 0            reports_tab = 0            settings_tab = 0            add_book = 0            delete_book = 0            edit_book = 0            import_book = 0            export_book = 0            delete_client = 0            add_client = 0            edit_client = 0            import_client = 0            export_client = 0            add_branch = 0            add_publisher= 0            add_category = 0            add_employee = 0            edit_emplooy = 0            delete_emplooy = 0            if self.checkBox_6.isChecked():                books_tab = 1            if self.checkBox_7.isChecked():                client_tab = 1            if self.checkBox_8.isChecked():                dashbord_tab = 1            if self.checkBox_10.isChecked():                history_tab = 1            if self.checkBox_11.isChecked():                reports_tab = 1            if self.checkBox_12.isChecked() :                settings_tab = 1            if self.checkBox.isChecked() :                add_book = 1            if self.checkBox_9.isChecked() :                delete_book = 1            if self.checkBox_2.isChecked() :                edit_book = 1            if self.checkBox_26.isChecked() :                import_book = 1            if self.checkBox_25.isChecked() :                export_book = 1            if self.checkBox_5.isChecked() :                delete_client = 1            if self.checkBox_3.isChecked() :                add_client = 1            if self.checkBox_4.isChecked() :                edit_client = 1            if self.checkBox_28.isChecked() :                import_client = 1            if self.checkBox_27.isChecked() :                export_client = 1            if self.checkBox_29.isChecked() :                add_branch = 1            if self.checkBox_30.isChecked() :                add_publisher = 1            if self.checkBox_31.isChecked() :                add_category = 1            if self.checkBox_32.isChecked() :                add_employee = 1            if self.checkBox_33.isChecked():                edit_emplooy = 1            if self.checkBox_35.isChecked():                delete_emplooy = 1            self.cur.execute('''                INSERT INTO employee_permission (employee_name,books_tab,client_tab,dashbord_tab,history_tab,                reports_tab,settings_tab,add_book,delete_book,edit_book,import_book,export_book,delete_client,add_client,                edit_client,import_client,export_client,add_branch,add_publisher,add_category,add_employee,edit_emplooy,delete_employee)                VALUES ( %s , %s , %s , %s , %s , %s ,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)             ''',(employee_name,books_tab,client_tab,dashbord_tab,history_tab,reports_tab,settings_tab,add_book,                  delete_book,edit_book,import_book,export_book,delete_client,add_client,edit_client,import_client,                  export_client,add_branch,add_publisher,add_category,add_employee,edit_emplooy,delete_emplooy))            self.db.commit()            print("Permission Added")            self.statusBar().showMessage('تم اضافة الصلاحيات للموظف بنجاح')            user_name = self.lineEdit_29.text()            self.cur.execute('''SELECT branch  FROM employee WHERE name=%s''', (user_name,))            data = self.cur.fetchone()            date = datetime.datetime.now()            Action = 'Add Permissions'            self.cur.execute('''                     INSERT INTO record ( employee_name ,action,date,branch_id)                     VALUES (%s , %s , %s , %s)                 ''', (user_name, Action, date, data))            self.db.commit()            self.show_all_hisetory()    def admin_report(self):        #send report top admin        pass#############################################    def open_login_tap(self):        self.tabWidget.setCurrentIndex(0)        print('Login_tap')    def open_reset_password_tap(self):        self.tabWidget.setCurrentIndex(1)        print('Reset_password_tap')    def open_daily_movements_tap(self):        self.tabWidget.setCurrentIndex(2)        print('daily_movements_tap')        self.statusBar().showMessage('To Day Tap')        if self.tabWidget.setCurrentIndex(2) == self.tabWidget.setCurrentIndex(2):            self.pushButton.setVisible(False)            self.pushButton_2.setVisible(True)            self.pushButton_4.setVisible(True)            self.pushButton_3.setVisible(True)            self.pushButton_7.setVisible(True)            self.pushButton_5.setVisible(True)            self.pushButton_6.setVisible(True)            self.pushButton_42.setVisible(True)            self.pushButton_44.setVisible(True)            self.statusBar().showMessage(' Done')    def open_books_tap(self):        self.tabWidget.setCurrentIndex(3)        self.tabWidget_2.setCurrentIndex(0)        print('Books_tap')        self.statusBar().showMessage('Books Tap')        if self.tabWidget.setCurrentIndex(3) == self.tabWidget.setCurrentIndex(3):            self.pushButton.setVisible(True)            self.pushButton_2.setVisible(False)            self.pushButton_4.setVisible(True)            self.pushButton_3.setVisible(True)            self.pushButton_7.setVisible(True)            self.pushButton_5.setVisible(True)            self.pushButton_6.setVisible(True)    def open_clients_tap(self):        self.tabWidget.setCurrentIndex(4)        self.tabWidget_3.setCurrentIndex(0)        print('Clients Tap')        self.statusBar().showMessage('Clients Tap')        if self.tabWidget.setCurrentIndex(4) == self.tabWidget.setCurrentIndex(4):            self.pushButton.setVisible(True)            self.pushButton_2.setVisible(True)            self.pushButton_4.setVisible(False)            self.pushButton_3.setVisible(True)            self.pushButton_7.setVisible(True)            self.pushButton_5.setVisible(True)            self.pushButton_6.setVisible(True)    def open_dashboard_tap(self):        self.dashbord_data()        self.tabWidget.setCurrentIndex(5)        print('Dashboard Tap')        self.statusBar().showMessage('Dashboard Tap')        if self.tabWidget.setCurrentIndex(5) == self.tabWidget.setCurrentIndex(5):            self.pushButton.setVisible(True)            self.pushButton_2.setVisible(True)            self.pushButton_4.setVisible(True)            self.pushButton_3.setVisible(False)            self.pushButton_7.setVisible(True)            self.pushButton_5.setVisible(True)            self.pushButton_6.setVisible(True)    def open_history_tap(self):        self.tabWidget.setCurrentIndex(6)        print('History Tap')        self.statusBar().showMessage('History Tap')        if self.tabWidget.setCurrentIndex(6) == self.tabWidget.setCurrentIndex(6):            self.pushButton.setVisible(True)            self.pushButton_2.setVisible(True)            self.pushButton_4.setVisible(True)            self.pushButton_3.setVisible(True)            self.pushButton_7.setVisible(False)            self.pushButton_5.setVisible(True)            self.pushButton_6.setVisible(True)    def open_reports_tap(self):        self.tabWidget.setCurrentIndex(7)        self.toolBox_2.setCurrentIndex(0)        print('Reports Tap')        self.statusBar().showMessage('Reports Tap')        if self.tabWidget.setCurrentIndex(7) == self.tabWidget.setCurrentIndex(7):            self.pushButton.setVisible(True)            self.pushButton_2.setVisible(True)            self.pushButton_4.setVisible(True)            self.pushButton_3.setVisible(True)            self.pushButton_7.setVisible(True)            self.pushButton_5.setVisible(False)            self.pushButton_6.setVisible(True)    def open_settings_tap(self):        self.tabWidget.setCurrentIndex(8)        self.toolBox.setCurrentIndex(0)        print('Settings Tap')        self.statusBar().showMessage('Settings Tap')        if self.tabWidget.setCurrentIndex(8) == self.tabWidget.setCurrentIndex(8):            self.pushButton.setEnabled(True)            self.pushButton_2.setVisible(True)            self.pushButton_4.setVisible(True)            self.pushButton_3.setVisible(True)            self.pushButton_7.setVisible(True)            self.pushButton_5.setVisible(True)            self.pushButton_6.setVisible(False)    def user_login(self):        user_name = self.lineEdit_29.text()        password = self.lineEdit_33.text()        try:            if user_name =='':                self.statusBar().showMessage('أدخل اسم المستخدم')            elif  password =='':                self.statusBar().showMessage('أدخل الباسورد')            else:                self.cur.execute('''SELECT branch ,  name , password FROM employee''')                data = self.cur.fetchall()                for row in data:                    if row[1] == user_name and row[2] == password:                        date=datetime.datetime.now()                        Action = "Login"                        self.cur.execute('''                        INSERT INTO record ( employee_name , action,date,branch_id)                        VALUES (%s,%s,%s,%s)                        ''',(user_name,Action,date,row[0]))                        self.db.commit()                        self.show_all_hisetory()                        self.pushButton.setEnabled(True)                        self.open_daily_movements_tap()                        self.cur.execute('''                               SELECT * FROM employee_permission WHERE employee_name = %s                                ''',(user_name,))                        user_permission = self.cur.fetchone()                        if user_permission[2] == 1 :                            self.pushButton_2.setEnabled(True)                        if user_permission[3] == 1:                            self.pushButton_4.setEnabled(True)                        if user_permission[4] == 1 :                            self.pushButton_3.setEnabled(True)                        if user_permission[5] == 1 :                            self.pushButton_7.setEnabled(True)                        if user_permission[6] == 1 :                            self.pushButton_5.setEnabled(True)                        if user_permission[7] == 1 :                            self.pushButton_6.setEnabled(True)                        if user_permission[8] == 1 :                            self.pushButton_10.setEnabled(True)                        if user_permission[9] == 1 :                            self.pushButton_13.setEnabled(True)                        if user_permission[10] == 1 :                            self.pushButton_11.setEnabled(True)                        if user_permission[11] == 1 :                            self.pushButton_36.setEnabled(True)                        if user_permission[12] == 1 :                            self.pushButton_37.setEnabled(True)                        if user_permission[13] == 1 :                            self.pushButton_18.setEnabled(True)                        if user_permission[14] == 1 :                            self.pushButton_15.setEnabled(True)                        if user_permission[15] == 1 :                            self.pushButton_16.setEnabled(True)                        if user_permission[16] == 1 :                            self.pushButton_39.setEnabled(True)                        if user_permission[17] == 1 :                            self.pushButton_38.setEnabled(True)                        if user_permission[18] == 1 :                            self.pushButton_19.setEnabled(True)                        if user_permission[19] == 1 :                            self.pushButton_20.setEnabled(True)                        if user_permission[20] == 1 :                            self.pushButton_23.setEnabled(True)                        if user_permission[21] == 1 :                            self.pushButton_29.setEnabled(True)                        if user_permission[22] == 1:                            self.pushButton_30.setEnabled(True)                        if user_permission[23] == 1 :                            self.pushButton_43.setEnabled(True)        except:            self.statusBar().showMessage('ليس لديك صلاحيات تسجيل الدخول')            # else:                #     self.statusBar().showMessage('الباسورد غير صحيح')    def sign_out(self):        logout_msg = QtWidgets.QMessageBox.warning(self, "Logout", "Are You Sure",                                                   QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)        if logout_msg == QtWidgets.QMessageBox.Yes:            self.tabWidget.setCurrentIndex(0)            if self.tabWidget.setCurrentIndex(0) == self.tabWidget.setCurrentIndex(0):                    self.lineEdit_29.setText('')                    self.lineEdit_33.setText('')                    self.pushButton.setEnabled(False)                    self.pushButton.setVisible(True)                    self.pushButton_2.setEnabled(False)                    self.pushButton_2.setVisible(True)                    self.pushButton_4.setEnabled(False)                    self.pushButton_4.setVisible(True)                    self.pushButton_3.setEnabled(False)                    self.pushButton_3.setVisible(True)                    self.pushButton_7.setEnabled(False)                    self.pushButton_7.setVisible(True)                    self.pushButton_5.setEnabled(False)                    self.pushButton_5.setVisible(True)                    self.pushButton_6.setVisible(True)                    self.pushButton_6.setEnabled(False)                    self.pushButton_42.setVisible(False)                    self.pushButton_44.setVisible(True)    def outcoplet(self):        namess = []        self.cur.execute(''' select mail_name from mails        ''')        names = self.cur.fetchall()        for name in names:            namess.append(name[0])        completer = QCompleter(namess)        self.lineEdit_10.setCompleter(completer)    def dashbord_data(self):        filter_date= self.dateEdit_4.date()        filter_date = filter_date.toPyDate()        year = (str(filter_date).split('-')[0])        self.cur.execute('''                  SELECT COUNT(book_id),EXTRACT(MONTH FROM book_from) as month                  FROM daily_movement                  WHERE year (book_from)= %s                  GROUP BY month              '''%(year))        data = self.cur.fetchall()        books_count=[]        rent_count=[]        for row in data :            books_count.append(row[0])            rent_count.append(row[1])        barchart = pyqtgraph.BarGraphItem(x=rent_count,height=books_count,width=.2)        self.widget.addItem(barchart)        # self.widget.plot(books_count, rent_count, pen=pen, symbol="+", symbolSize=10)        self.widget.setTitle('المبيعات')        self.widget.addLegend()        self.widget.setLabel('left','عدد الكتب المباعه',color='red',setSize=80)        self.widget.setLabel('bottom','الشهر',color='red',setSize=80)        self.widget.showGrid(x=True,y=True)if __name__ == "__main__":    app = QtWidgets.QApplication(sys.argv)    window = MyWindow()    window.show()    sys.exit(app.exec_())